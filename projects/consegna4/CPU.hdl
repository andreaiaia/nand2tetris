// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //DECODE
    //Calcolo loadA
    Not(in=instruction[15], out=AoCin);    //Nega il bit più significativo
    Or(a=AoCin, b=instruction[5], out=loadA);  //LoadA è vero solo se ho una A-instruction o nella C-instruction d1 vale 1
    //Calcolo se fare il jump e qual è il load nel caso
    Mux(a=instruction[0], b=instruction[2], sel=wng, out=loadminz); //in[0] = j3 - in[2] = j1
    Mux(a=loadminz, b=instruction[1], sel=wzr, out=loadPC0); //in[1] = j2
    And(a=loadPC0, b=instruction[15], out=loadPC); // Faccio il jump solo se ho una C-instruction
    Not(in=loadPC, out=incPC); //Se non loado, allora incremento il pc
    //Salvo writeM = in[3] = d3, solo se ho una C-instruction
    And(a=instruction[3], b=instruction[15], out=writeM);
    //Carico il registro D, solo se ho una C-instruction
    And(a=instruction[4], b=instruction[15], out=loadD); //in[4] = d2
    //Se ho una C instruction, scelgo l'output della ALU
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=w1);

    ARegister(in=w1, load=loadA, out=wA, out[0..14]=addressM);

    Mux16(a=wA, b=inM, sel=instruction[12], out=wAM); //in[12] = a

    DRegister(in=ALUout, load=loadD, out=wD);

    ALU(x=wD, y=wAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
            ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=wzr, ng=wng);
    // in[11]..in[6] = c1..c6

    PC(in=wA, load=loadPC, inc=incPC, reset=reset, out=out, out[0..14]=pc);
}